package com.vk2.touchsreentab.model.datasource;import android.content.Context;import androidx.annotation.NonNull;import androidx.lifecycle.MutableLiveData;import androidx.paging.PageKeyedDataSource;import com.vk2.touchsreentab.api.ApiController;import com.vk2.touchsreentab.api.Callback;import com.vk2.touchsreentab.database.entity.Song;import com.vk2.touchsreentab.model.api.SongForm;import com.vk2.touchsreentab.utils.Constants;import java.util.List;public class SongDataSource extends PageKeyedDataSource<Integer, Song> {    private Context context;    private int page = 1, limit = 15;    public MutableLiveData<Boolean> progressLiveStatus = new MutableLiveData<>();    SongDataSource(Context context) {        this.context = context;    }    @Override    public void loadInitial(@NonNull LoadInitialParams<Integer> params, @NonNull final LoadInitialCallback<Integer, Song> callback) {        progressLiveStatus.postValue(Constants.LOADING);        ApiController.getInstance().getHotSongs(context, page, limit, new Callback() {            @Override            public void response(Object obj) {                progressLiveStatus.postValue(!Constants.LOADING);                try {                    SongForm songForm = (SongForm) obj;                    if (songForm != null) {                        if (songForm.getErr() == ApiController.SUCCESS) {                            List<Song> songs = songForm.getData();                            if (songs != null) {                                songs.add(0, new Song());                                songs.add(0, new Song());                                callback.onResult(songs, page--, page++);                                page++;                            }                        }                    }                } catch (ClassCastException e) {                    e.printStackTrace();                }            }        });    }    @Override    public void loadBefore(@NonNull LoadParams<Integer> params, @NonNull LoadCallback<Integer, Song> callback) {    }    @Override    public void loadAfter(@NonNull LoadParams<Integer> params, @NonNull final LoadCallback<Integer, Song> callback) {        progressLiveStatus.postValue(Constants.LOADING);        ApiController.getInstance().getHotSongs(context, page, limit, new Callback() {            @Override            public void response(Object obj) {                progressLiveStatus.postValue(!Constants.LOADING);                try {                    SongForm songForm = (SongForm) obj;                    if (songForm != null) {                        if (songForm.getErr() == ApiController.SUCCESS) {                            List<Song> songs = songForm.getData();                            if (songs != null && songs.size() > 0) {                                callback.onResult(songs, page);                                page++;                            }                        }                    }                } catch (ClassCastException e) {                    e.printStackTrace();                }            }        });    }}