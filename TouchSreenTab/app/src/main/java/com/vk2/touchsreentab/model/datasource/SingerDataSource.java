package com.vk2.touchsreentab.model.datasource;import android.arch.paging.PageKeyedDataSource;import android.support.annotation.NonNull;import android.util.Log;import com.vk2.touchsreentab.api.ApiController;import com.vk2.touchsreentab.database.entity.Singer;import com.vk2.touchsreentab.model.ResultSinger;import com.vk2.touchsreentab.utils.Constants;import io.reactivex.Observable;import io.reactivex.Observer;import io.reactivex.android.schedulers.AndroidSchedulers;import io.reactivex.disposables.Disposable;import io.reactivex.schedulers.Schedulers;public class SingerDataSource extends PageKeyedDataSource<Integer, Singer> {    private int firstPage = 1,nextPage = 0;    @Override    public void loadInitial(@NonNull LoadInitialParams<Integer> params, @NonNull final LoadInitialCallback<Integer, Singer> callback) {        Observable<ResultSinger> observable = ApiController.getAPIOnline().getListSingers(firstPage, Constants.LIMIT_ITEM);        observable.observeOn(AndroidSchedulers.mainThread())                .subscribeOn(Schedulers.io())                .subscribe(new Observer<ResultSinger>() {                    @Override                    public void onSubscribe(Disposable d) {                    }                    @Override                    public void onNext(ResultSinger resultSinger) {                        Log.d("TAG", "ResultSinger onNext: "+resultSinger.getMsg());                        firstPage = firstPage - 1;                        nextPage = firstPage + 1;                        callback.onResult(resultSinger.getData(),firstPage,nextPage);                    }                    @Override                    public void onError(Throwable e) {                        Log.d("TAG", "getListSingers onError: "+e.toString());                    }                    @Override                    public void onComplete() {                        Log.d("TAG", "getListSingers onComplete: ");                    }                });    }    @Override    public void loadBefore(@NonNull LoadParams<Integer> params, @NonNull LoadCallback<Integer, Singer> callback) {    }    @Override    public void loadAfter(@NonNull LoadParams<Integer> params, @NonNull final LoadCallback<Integer, Singer> callback) {        Observable<ResultSinger> observable = ApiController.getAPIOnline().getListSingers(nextPage, Constants.LIMIT_ITEM);        observable.observeOn(AndroidSchedulers.mainThread())                .subscribeOn(Schedulers.io())                .subscribe(new Observer<ResultSinger>() {                    @Override                    public void onSubscribe(Disposable d) {                    }                    @Override                    public void onNext(ResultSinger resultSinger) {                        Log.e("TAG", "ResultSinger onNext: "+resultSinger.getMsg());                        callback.onResult(resultSinger.getData(),nextPage);                        nextPage = nextPage + 1;                    }                    @Override                    public void onError(Throwable e) {                        Log.e("TAG", "getListSingers onError: "+e.toString());                    }                    @Override                    public void onComplete() {                        Log.e("TAG", "getListSingers onComplete: ");                    }                });    }}