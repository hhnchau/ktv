package com.vk2.touchsreentab.fragment;import android.os.AsyncTask;import android.os.Bundle;import android.os.Handler;import android.os.Looper;import android.support.annotation.NonNull;import android.support.annotation.Nullable;import android.support.v7.widget.DividerItemDecoration;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.LinearLayout;import android.widget.ProgressBar;import com.vk2.touchsreentab.R;import com.vk2.touchsreentab.adapter.SoundCloudAdapter;import com.vk2.touchsreentab.api.ApiController;import com.vk2.touchsreentab.database.entity.Song;import com.vk2.touchsreentab.fragment.fragmentcontroller.Fragmentez;import com.vk2.touchsreentab.model.ResultSoundCloud;import com.vk2.touchsreentab.model.SoundCloudObject;import com.vk2.touchsreentab.model.TextSearch;import com.vk2.touchsreentab.utils.SaveDataUtils;import java.util.ArrayList;import java.util.List;import io.reactivex.Observer;import io.reactivex.android.schedulers.AndroidSchedulers;import io.reactivex.disposables.Disposable;public class SearchSoundCloundFragment extends BaseFragment {    private View view;    private SoundCloudAdapter adapter;    private List<Song> mListSong;    private boolean loading = true;    private int pastVisiblesItems, visibleItemCount, totalItemCount;    private int countItem = 0, currentItem = 0;    private ProgressBar progressBar;    private int nextPage = 0;    private int maxPage = 50;    private String mFullTextSearch = "";    @Nullable    @Override    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        view = inflater.inflate(R.layout.fragment_search_youtube, container, false);        initRecyclerView();        showBackButton();        showEnterButton();        return view;    }    private void initRecyclerView() {        mListSong = new ArrayList<>();        if (getActivity() == null) return;        RecyclerView rcv = view.findViewById(R.id.rcvSongs);        progressBar = view.findViewById(R.id.progressBar);        adapter = new SoundCloudAdapter(mListSong);        final LinearLayoutManager mLayoutManager = new LinearLayoutManager(getActivity(), LinearLayout.VERTICAL, false);        rcv.setLayoutManager(mLayoutManager);        DividerItemDecoration dividerItemDecoration = new DividerItemDecoration(getActivity(), mLayoutManager.getOrientation());        dividerItemDecoration.setDrawable(getActivity().getResources().getDrawable(R.drawable.divider));        rcv.addItemDecoration(dividerItemDecoration);        rcv.setAdapter(adapter);        getTextSearchViewModel().getTextSearch().observe(getActivity(), new android.arch.lifecycle.Observer<TextSearch>() {            @Override            public void onChanged(TextSearch textSearch) {                if (textSearch.getFrg() == Fragmentez.SEARCH_SOUNDCLOUND_FRAGMENT) {                    clearRecyclerView();                    mFullTextSearch = textSearch.getTextSearch();                    new Handler().post(new Runnable() {                        @Override                        public void run() {                            progressBar.setVisibility(View.VISIBLE);                            new SearchSoundClound(mFullTextSearch, nextPage, maxPage).executeOnExecutor(AsyncTask.SERIAL_EXECUTOR);                        }                    });                }            }        });        rcv.addOnScrollListener(new RecyclerView.OnScrollListener() {            @Override            public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {                if (dy > 0) {                    visibleItemCount = mLayoutManager.getChildCount();                    totalItemCount = mLayoutManager.getItemCount();                    pastVisiblesItems = mLayoutManager.findFirstVisibleItemPosition();                    if (loading) {                        if ((visibleItemCount + pastVisiblesItems) >= totalItemCount) {                            loading = false;                            Log.v("...", "Last Item Wow !");                            new Handler().post(new Runnable() {                                @Override                                public void run() {                                    nextPage++;                                    progressBar.setVisibility(View.VISIBLE);                                    new SearchSoundClound(mFullTextSearch, nextPage, maxPage).executeOnExecutor(AsyncTask.SERIAL_EXECUTOR);                                }                            });                        }                    }                }            }        });    }    private class SearchSoundClound extends AsyncTask<String, Integer, List<Song>> {        private String mQuery;        private int mNextPage, mPage;        SearchSoundClound(String mFullTextSearch, int nextpage, int pageNumber) {            mQuery = mFullTextSearch;            mNextPage = nextPage;            mPage = pageNumber;        }        @Override        protected void onPreExecute() {            super.onPreExecute();        }        protected List<Song> doInBackground(String... urls) {            return searchSongFromSoundClound(mQuery, mNextPage, mPage);        }        protected void onProgressUpdate(Integer... progress) {        }        protected void onPostExecute(List<Song> result) {        }    }    private List<Song> searchSongFromSoundClound(String mFullTextSearch, int nextpage, int maxPage) {        final String client_id = SaveDataUtils.getInstance(getContext()).getKeySoundCloud();        final List<Song> listSong = new ArrayList<>();        ApiController.getDataOnline()                .searchSongs(mFullTextSearch.replace(" ", "%20"), client_id, String.valueOf(maxPage), String.valueOf(nextpage), String.valueOf(nextpage * maxPage))                .observeOn(AndroidSchedulers.mainThread())                .subscribe(new Observer<ResultSoundCloud>() {                    @Override                    public void onSubscribe(Disposable d) {                    }                    @Override                    public void onNext(ResultSoundCloud resultSoundCloud) {                        List<SoundCloudObject> songSoundCloud = new ArrayList<>();                        if (resultSoundCloud != null) {                            songSoundCloud = resultSoundCloud.getSoundCloudObject();                        }                        if (songSoundCloud != null) {                            for (SoundCloudObject soundCloudObject : songSoundCloud) {                                Song song = new Song();                                song.setFileName("S".concat(String.valueOf(soundCloudObject.getId())));                                song.setSongName(soundCloudObject.getTitle());                                song.setVideoPath(soundCloudObject.getStream_url() + "/?client_id=" + client_id);                                song.setImage(soundCloudObject.getArtwork_url());                                song.setSingerName1(soundCloudObject.getDescription());                                listSong.add(song);                            }                        }                        countItem = listSong.size();                        currentItem = mListSong.size() + 1;                        mListSong.addAll(listSong);                        loading = true;                        updateUI();                    }                    @Override                    public void onError(Throwable e) {                    }                    @Override                    public void onComplete() {                    }                });        return null;    }    private void updateUI() {        new Handler(Looper.getMainLooper()).postDelayed(new Runnable() {            @Override            public void run() {                progressBar.setVisibility(View.GONE);                adapter.notifyItemRangeChanged(currentItem, countItem);            }        }, 100);    }    private void clearRecyclerView() {        nextPage = 0;        mListSong.clear();    }    @Override    protected void onResumeFragment() {        showBackButton();        showEnterButton();    }}