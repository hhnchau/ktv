package com.vk2.touchsreentab.model.datasource;import android.content.Context;import android.util.Log;import androidx.annotation.NonNull;import androidx.lifecycle.MutableLiveData;import androidx.paging.PageKeyedDataSource;import com.vk2.touchsreentab.api.ApiController;import com.vk2.touchsreentab.api.Callback;import com.vk2.touchsreentab.model.api.Album;import com.vk2.touchsreentab.model.ResultAlbum;import com.vk2.touchsreentab.model.api.AlbumForm;import com.vk2.touchsreentab.utils.Constants;import java.util.List;import io.reactivex.Observable;import io.reactivex.Observer;import io.reactivex.android.schedulers.AndroidSchedulers;import io.reactivex.disposables.Disposable;import io.reactivex.schedulers.Schedulers;public class AlbumDataSource extends PageKeyedDataSource<Integer, Album> {    private Context context;    private int page = 1, limit = 15;    public AlbumDataSource(Context context) {        this.context = context;    }    @Override    public void loadInitial(@NonNull LoadInitialParams<Integer> params, @NonNull final LoadInitialCallback<Integer, Album> callback) {        ApiController.getInstance().getHotAlbums(context, page, limit, new Callback() {            @Override            public void response(Object obj) {                try {                    AlbumForm albumForm = (AlbumForm) obj;                    if (albumForm != null) {                        if (albumForm.getErr() == ApiController.SUCCESS) {                            List<Album> albums = albumForm.getData();                            if (albums != null) {                                callback.onResult(albums, page--, page++);                                page++;                            }                        }                    }                } catch (ClassCastException e) {                    e.printStackTrace();                }            }        });    }    @Override    public void loadBefore(@NonNull LoadParams<Integer> params, @NonNull LoadCallback<Integer, Album> callback) {    }    @Override    public void loadAfter(@NonNull LoadParams<Integer> params, @NonNull final LoadCallback<Integer, Album> callback) {        ApiController.getInstance().getHotAlbums(context, page, limit, new Callback() {            @Override            public void response(Object obj) {                try {                    AlbumForm albumForm = (AlbumForm) obj;                    if (albumForm != null) {                        if (albumForm.getErr() == ApiController.SUCCESS) {                            List<Album> albums = albumForm.getData();                            if (albums != null) {                                callback.onResult(albums, page);                                page++;                            }                        }                    }                } catch (ClassCastException e) {                    e.printStackTrace();                }            }        });    }}