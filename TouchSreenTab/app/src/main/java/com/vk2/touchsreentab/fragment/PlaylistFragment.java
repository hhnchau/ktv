package com.vk2.touchsreentab.fragment;import android.arch.lifecycle.Observer;import android.arch.lifecycle.ViewModelProviders;import android.os.Bundle;import android.support.annotation.NonNull;import android.support.annotation.Nullable;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.TextView;import com.vk2.touchsreentab.R;import com.vk2.touchsreentab.adapter.PlaylistAdapter;import com.vk2.touchsreentab.database.entity.Song;import com.vk2.touchsreentab.model.viewmodel.PlaylistModelView;import com.vk2.touchsreentab.utils.OnSingleClickListener;import java.util.ArrayList;import java.util.List;public class PlaylistFragment extends BaseFragment {    private View view;    @Nullable    @Override    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        view = inflater.inflate(R.layout.fragment_playlist, container, false);        initView();        return view;    }    private void initView() {        RecyclerView rcv = view.findViewById(R.id.rcvPlaylist);        final PlaylistAdapter adapter = new PlaylistAdapter(new ArrayList<Song>());        rcv.setAdapter(adapter);        LinearLayoutManager layoutManager = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);        rcv.addItemDecoration(getDivider(layoutManager));        rcv.setLayoutManager(layoutManager);        rcv.setAdapter(adapter);        if (getActivity() == null) return;        PlaylistModelView playlistModelView = ViewModelProviders.of(getActivity()).get(PlaylistModelView.class);        playlistModelView.getPlaylist().observe(getActivity(), new Observer<List<Song>>() {            @Override            public void onChanged(List<Song> songs) {                adapter.update(songs);            }        });        adapter.setOnItemClick(new PlaylistAdapter.OnItemClick() {            @Override            public void onItemClick(Song song) {            }            @Override            public void onRemoveClick(Song song) {                updatePlaylist(song, PlaylistModelView.REMOVE);            }            @Override            public void onMoveClick(Song song) {                updatePlaylist(song, PlaylistModelView.MOVE);            }            @Override            public void onIconClick(Song song) {            }        });        view.findViewById(R.id.tvEmpty).setOnClickListener(new OnSingleClickListener() {            @Override            public void onSingleClick(View v) {                updatePlaylist(null, PlaylistModelView.EMPTY);                enable();            }        });        view.findViewById(R.id.tvRandom).setOnClickListener(new OnSingleClickListener() {            @Override            public void onSingleClick(View v) {                updatePlaylist(null, PlaylistModelView.RANDOM);                enable();            }        });    }}