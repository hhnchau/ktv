package com.vk2.touchsreentab.model.datasource;import android.arch.lifecycle.MutableLiveData;import android.arch.paging.PageKeyedDataSource;import android.support.annotation.NonNull;import android.util.Log;import com.vk2.touchsreentab.api.ApiController;import com.vk2.touchsreentab.model.Ablum;import com.vk2.touchsreentab.model.ResultAblum;import com.vk2.touchsreentab.utils.Constants;import io.reactivex.Observable;import io.reactivex.Observer;import io.reactivex.android.schedulers.AndroidSchedulers;import io.reactivex.disposables.Disposable;import io.reactivex.schedulers.Schedulers;public class AblumDataSource extends PageKeyedDataSource<Integer, Ablum> {    private int firstPage = 1,nextPage = 0;    public MutableLiveData<String> getProgressLiveStatus() {        return progressLiveStatus;    }    private MutableLiveData<String> progressLiveStatus = new MutableLiveData<>();    @Override    public void loadInitial(@NonNull LoadInitialParams<Integer> params, @NonNull final LoadInitialCallback<Integer, Ablum> callback) {        Observable<ResultAblum> observable = ApiController.getAPIOnline().getListAblums(firstPage,Constants.LIMIT_ITEM);        observable.observeOn(AndroidSchedulers.mainThread())                .subscribeOn(Schedulers.io())                .subscribe(new Observer<ResultAblum>() {                    @Override                    public void onSubscribe(Disposable d) {                        d.toString();                        progressLiveStatus.postValue(Constants.LOADING);                    }                    @Override                    public void onNext(ResultAblum ablum) {                        firstPage = firstPage - 1;                         nextPage = firstPage + 1;                        if(ablum != null ) {                            Log.d("TAG", "getListAblums onNext: "+ablum.getData().size());                            progressLiveStatus.postValue(Constants.LOADED);                            callback.onResult(ablum.getData(),firstPage,nextPage);                        }                    }                    @Override                    public void onError(Throwable e) {                        Log.d("TAG", "getListAblums onError: "+e.toString());                        progressLiveStatus.postValue(Constants.LOADED);                    }                    @Override                    public void onComplete() {                        Log.e("TAG", "getListAblums onComplete");                    }                });    }    @Override    public void loadBefore(@NonNull LoadParams<Integer> params, @NonNull LoadCallback<Integer, Ablum> callback) {    }    @Override    public void loadAfter(@NonNull LoadParams<Integer> params, @NonNull final LoadCallback<Integer, Ablum> callback) {        Observable<ResultAblum> observable = ApiController.getAPIOnline().getListAblums(nextPage,Constants.LIMIT_ITEM);        observable.observeOn(AndroidSchedulers.mainThread())                .subscribeOn(Schedulers.io())                .subscribe(new Observer<ResultAblum>() {                    @Override                    public void onSubscribe(Disposable d) {                        d.toString();                        progressLiveStatus.postValue(Constants.LOADING);                    }                    @Override                    public void onNext(ResultAblum ablum) {                        if(ablum != null ) {                            Log.d("TAG", "getListAblums onNext: "+ablum.getData().size());                            progressLiveStatus.postValue(Constants.LOADED);                            callback.onResult(ablum.getData(),nextPage);                            nextPage = nextPage + 1;                        }                    }                    @Override                    public void onError(Throwable e) {                        Log.d("TAG", "getListAblums onError: "+e.toString());                        progressLiveStatus.postValue(Constants.LOADED);                    }                    @Override                    public void onComplete() {                        Log.e("TAG", "getListAblums onComplete");                    }                });    }}